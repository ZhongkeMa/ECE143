{
  "submissions_dump": [
    {
      "id": 191838487,
      "lang": "cpp",
      "time": "6\u00a0months",
      "timestamp": 1543250307,
      "status_display": "Accepted",
      "runtime": "92 ms",
      "url": "/submissions/detail/191838487/",
      "is_pending": "Not Pending",
      "title": "Encode and Decode Strings",
      "memory": "N/A",
      "code": "class Codec {\npublic:\n\n    // Encodes a list of strings to a single string.\n    string encode(vector<string>& strs) {\n        string res;\n        for(auto s:strs)\n        {\n            res += to_string(s.length());\n            res += 'x';\n            res += s;\n        }\n        cout<<res<<endl;\n        return res;\n    }\n\n    // Decodes a single string to a list of strings.\n    vector<string> decode(string s) {\n        int p = 0;\n        vector<string> res;\n        cout<<s.length();\n        while(p<s.length())\n        {\n            auto x = s.find('x',p);\n            cout<<\"x=\"<<x<<endl;\n            if(x==string::npos)\n                return res;\n            \n            int l = stoi(s.substr(p,x-p));\n            cout<<l<<endl;\n            res.push_back(s.substr(x+1, l));\n            p = x+l+1;\n        }\n        \n        return res;\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec;\n// codec.decode(codec.encode(strs));",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
      "id": 191838395,
      "lang": "cpp",
      "time": "6\u00a0months",
      "timestamp": 1543250258,
      "status_display": "Wrong Answer",
      "runtime": "N/A",
      "url": "/submissions/detail/191838395/",
      "is_pending": "Not Pending",
      "title": "Encode and Decode Strings",
      "memory": "N/A",
      "code": "class Codec {\npublic:\n\n    // Encodes a list of strings to a single string.\n    string encode(vector<string>& strs) {\n        string res;\n        for(auto s:strs)\n        {\n            res += to_string(s.length());\n            res += 'x';\n            res += s;\n        }\n        cout<<res<<endl;\n        return res;\n    }\n\n    // Decodes a single string to a list of strings.\n    vector<string> decode(string s) {\n        int p = 0;\n        vector<string> res;\n        cout<<s.length();\n        while(p<s.length())\n        {\n            auto x = s.find('x',p);\n            cout<<\"x=\"<<x<<endl;\n            if(x==string::npos || x == s.length()-1)\n                return res;\n            \n            int l = stoi(s.substr(p,x-p));\n            cout<<l<<endl;\n            res.push_back(s.substr(x+1, l));\n            p = x+l+1;\n        }\n        \n        return res;\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec;\n// codec.decode(codec.encode(strs));",
      "compare_result": "1011111111110111111110010011111101111111111110111111111110101111111111111111110111111101111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
      "id": 191838327,
      "lang": "cpp",
      "time": "6\u00a0months",
      "timestamp": 1543250223,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/191838327/",
      "is_pending": "Not Pending",
      "title": "Encode and Decode Strings",
      "memory": "N/A",
      "code": "class Codec {\npublic:\n\n    // Encodes a list of strings to a single string.\n    string encode(vector<string>& strs) {\n        string res;\n        for(auto s:strs)\n        {\n            res += to_string(s.length());\n            res += 'x';\n            res += s;\n        }\n        cout<<res<<endl;\n        return res;\n    }\n\n    // Decodes a single string to a list of strings.\n    vector<string> decode(string s) {\n        int p = 0;\n        vector<string> res;\n        cout<<s.length();\n        while(p<s.length())\n        {\n            auto x = s.find('x',p);\n            cout<<endl<<\"x=\"<<x<<' '<<p<<endl;\n            if(x==string::npos || p+x == s.length()-1)\n                return res;\n            \n            int l = stoi(s.substr(p,x));\n            cout<<l<<endl;\n            res.push_back(s.substr(p+x+1, l));\n            p += x+l+1;\n        }\n        \n        return res;\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec;\n// codec.decode(codec.encode(strs));",
      "compare_result": null
    },
    {
      "id": 191838300,
      "lang": "cpp",
      "time": "6\u00a0months",
      "timestamp": 1543250208,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/191838300/",
      "is_pending": "Not Pending",
      "title": "Encode and Decode Strings",
      "memory": "N/A",
      "code": "class Codec {\npublic:\n\n    // Encodes a list of strings to a single string.\n    string encode(vector<string>& strs) {\n        string res;\n        for(auto s:strs)\n        {\n            res += to_string(s.length());\n            res += 'x';\n            res += s;\n        }\n        cout<<res<<endl;\n        return res;\n    }\n\n    // Decodes a single string to a list of strings.\n    vector<string> decode(string s) {\n        int p = 0;\n        vector<string> res;\n        cout<<s.length();\n        while(p<s.length())\n        {\n            auto x = s.find('x',p);\n            cout<<endl<<\"x=\"<<x<<' '<<p<<endl;\n            if(x==string::npos || p+x == s.length()-1)\n                return res;\n            \n            int l = stoi(s.substr(p,x));\n            cout<<l<<endl;\n            res.push_back(s.substr(p+x+1, l));\n            p += x+l;\n        }\n        \n        return res;\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec;\n// codec.decode(codec.encode(strs));",
      "compare_result": null
    },
    {
      "id": 191838261,
      "lang": "cpp",
      "time": "6\u00a0months",
      "timestamp": 1543250182,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/191838261/",
      "is_pending": "Not Pending",
      "title": "Encode and Decode Strings",
      "memory": "N/A",
      "code": "class Codec {\npublic:\n\n    // Encodes a list of strings to a single string.\n    string encode(vector<string>& strs) {\n        string res;\n        for(auto s:strs)\n        {\n            res += to_string(s.length());\n            res += 'x';\n            res += s;\n        }\n        cout<<res<<endl;\n        return res;\n    }\n\n    // Decodes a single string to a list of strings.\n    vector<string> decode(string s) {\n        int p = 0;\n        vector<string> res;\n        cout<<s.length();\n        while(p<s.length())\n        {\n            auto x = s.find('x',p);\n            cout<<\"x=\"<<x<<endl;\n            if(x==string::npos || p+x == s.length()-1)\n                return res;\n            \n            int l = stoi(s.substr(p,x));\n            cout<<l<<endl;\n            res.push_back(s.substr(p+x+1, l));\n            p += x+l;\n        }\n        \n        return res;\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec;\n// codec.decode(codec.encode(strs));",
      "compare_result": null
    },
    {
      "id": 191836379,
      "lang": "cpp",
      "time": "6\u00a0months",
      "timestamp": 1543249151,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/191836379/",
      "is_pending": "Not Pending",
      "title": "Encode and Decode Strings",
      "memory": "N/A",
      "code": "class Codec {\npublic:\n\n    // Encodes a list of strings to a single string.\n    string encode(vector<string>& strs) {\n        string res;\n        for(auto s:strs)\n        {\n            res += to_string(s.length());\n            res += 'x';\n            res += s;\n        }\n        cout<<res<<endl;\n        return res;\n    }\n\n    // Decodes a single string to a list of strings.\n    vector<string> decode(string s) {\n        int p = 0;\n        vector<string> res;\n        cout<<s.length();\n        while(p<s.length())\n        {\n            auto x = s.find('x',p);\n            cout<<\"x=\"<<x<<endl;\n            if(x==string::npos || x == s.length()-1)\n                return res;\n            \n            int l = stoi(s.substr(p,x-p));\n            cout<<l<<endl;\n            res.push_back(s.substr(x+1, l));\n            p = x+l;\n        }\n        \n        return res;\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec;\n// codec.decode(codec.encode(strs));",
      "compare_result": null
    },
    {
      "id": 191836363,
      "lang": "cpp",
      "time": "6\u00a0months",
      "timestamp": 1543249141,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/191836363/",
      "is_pending": "Not Pending",
      "title": "Encode and Decode Strings",
      "memory": "N/A",
      "code": "class Codec {\npublic:\n\n    // Encodes a list of strings to a single string.\n    string encode(vector<string>& strs) {\n        string res;\n        for(auto s:strs)\n        {\n            res += to_string(s.length());\n            res += 'x';\n            res += s;\n        }\n        cout<<res<<endl;\n        return res;\n    }\n\n    // Decodes a single string to a list of strings.\n    vector<string> decode(string s) {\n        int p = 0;\n        vector<string> res;\n        cout<<s.length();\n        while(p<s.length())\n        {\n            auto x = s.find('x',p);\n            cout<<\"x=\"<<x<<endl;\n            if(x==string::npos || x == s.length())\n                return res;\n            \n            int l = stoi(s.substr(p,x-p));\n            cout<<l<<endl;\n            res.push_back(s.substr(x+1, l));\n            p = x+l;\n        }\n        \n        return res;\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec;\n// codec.decode(codec.encode(strs));",
      "compare_result": null
    },
    {
      "id": 191836245,
      "lang": "cpp",
      "time": "6\u00a0months",
      "timestamp": 1543249079,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/191836245/",
      "is_pending": "Not Pending",
      "title": "Encode and Decode Strings",
      "memory": "N/A",
      "code": "class Codec {\npublic:\n\n    // Encodes a list of strings to a single string.\n    string encode(vector<string>& strs) {\n        string res;\n        for(auto s:strs)\n        {\n            res += to_string(s.length());\n            res += 'x';\n            res += s;\n        }\n        cout<<res<<endl;\n        return res;\n    }\n\n    // Decodes a single string to a list of strings.\n    vector<string> decode(string s) {\n        int p = 0;\n        vector<string> res;\n        cout<<s.length();\n        while(p<s.length())\n        {\n            auto x = s.find('x',p);\n            \n            if(x==string::npos || x == 0)\n                return res;\n            \n            int l = stoi(s.substr(p,x-p));\n            cout<<l<<endl;\n            res.push_back(s.substr(x+1, l));\n            p = x+l;\n        }\n        \n        return res;\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec;\n// codec.decode(codec.encode(strs));",
      "compare_result": null
    },
    {
      "id": 191836202,
      "lang": "cpp",
      "time": "6\u00a0months",
      "timestamp": 1543249053,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/191836202/",
      "is_pending": "Not Pending",
      "title": "Encode and Decode Strings",
      "memory": "N/A",
      "code": "class Codec {\npublic:\n\n    // Encodes a list of strings to a single string.\n    string encode(vector<string>& strs) {\n        string res;\n        for(auto s:strs)\n        {\n            res += to_string(s.length());\n            res += 'x';\n            res += s;\n        }\n        cout<<res<<endl;\n        return res;\n    }\n\n    // Decodes a single string to a list of strings.\n    vector<string> decode(string s) {\n        int p = 0;\n        vector<string> res;\n        cout<<s.length();\n        while(p<s.length())\n        {\n            auto x = s.find('x',p);\n            cout<<x;\n            if(x==string::npos)\n                return res;\n            \n            int l = stoi(s.substr(p,x-p));\n            cout<<l<<endl;\n            res.push_back(s.substr(x+1, l));\n            p = x+l;\n        }\n        \n        return res;\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec;\n// codec.decode(codec.encode(strs));",
      "compare_result": null
    },
    {
      "id": 191836155,
      "lang": "cpp",
      "time": "6\u00a0months",
      "timestamp": 1543249030,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/191836155/",
      "is_pending": "Not Pending",
      "title": "Encode and Decode Strings",
      "memory": "N/A",
      "code": "class Codec {\npublic:\n\n    // Encodes a list of strings to a single string.\n    string encode(vector<string>& strs) {\n        string res;\n        for(auto s:strs)\n        {\n            res += to_string(s.length());\n            res += 'x';\n            res += s;\n        }\n        cout<<res<<endl;\n        return res;\n    }\n\n    // Decodes a single string to a list of strings.\n    vector<string> decode(string s) {\n        int p = 0;\n        vector<string> res;\n        cout<<s.length();\n        while(p<s.length())\n        {\n            auto x = s.find('x',p);\n            if(x==string::npos)\n                return res;\n            \n            int l = stoi(s.substr(p,x-p));\n            cout<<l<<endl;\n            res.push_back(s.substr(x+1, l));\n            p = x+l;\n        }\n        \n        return res;\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec;\n// codec.decode(codec.encode(strs));",
      "compare_result": null
    },
    {
      "id": 191835902,
      "lang": "cpp",
      "time": "6\u00a0months",
      "timestamp": 1543248878,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/191835902/",
      "is_pending": "Not Pending",
      "title": "Encode and Decode Strings",
      "memory": "N/A",
      "code": "class Codec {\npublic:\n\n    // Encodes a list of strings to a single string.\n    string encode(vector<string>& strs) {\n        string res;\n        for(auto s:strs)\n        {\n            res += to_string(s.length());\n            res += 'x';\n            res += s;\n        }\n        return res;\n    }\n\n    // Decodes a single string to a list of strings.\n    vector<string> decode(string s) {\n        int p = 0;\n        vector<string> res;\n        cout<<s.length();\n        while(p<s.length())\n        {\n            int x = s.find('x',p);\n            if(x==string::npos)\n                return res;\n            \n            int l = stoi(s.substr(p,x-p));\n            cout<<l<<endl;\n            res.push_back(s.substr(x+1, l));\n            p = x+l;\n        }\n        \n        return res;\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec;\n// codec.decode(codec.encode(strs));",
      "compare_result": null
    },
    {
      "id": 191835829,
      "lang": "cpp",
      "time": "6\u00a0months",
      "timestamp": 1543248839,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/191835829/",
      "is_pending": "Not Pending",
      "title": "Encode and Decode Strings",
      "memory": "N/A",
      "code": "class Codec {\npublic:\n\n    // Encodes a list of strings to a single string.\n    string encode(vector<string>& strs) {\n        string res;\n        for(auto s:strs)\n        {\n            res += to_string(s.length());\n            res += 'x';\n            res += s;\n        }\n        return res;\n    }\n\n    // Decodes a single string to a list of strings.\n    vector<string> decode(string s) {\n        int p = 0;\n        vector<string> res;\n        cout<<s.length();\n        while(p<s.length())\n        {\n            int x = s.find('x',p);\n            if(x==-1)\n                return res;\n            \n            int l = stoi(s.substr(p,x-p));\n            cout<<l<<endl;\n            res.push_back(s.substr(x+1, l));\n            p = x+l;\n        }\n        \n        return res;\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec;\n// codec.decode(codec.encode(strs));",
      "compare_result": null
    },
    {
      "id": 191835693,
      "lang": "cpp",
      "time": "6\u00a0months",
      "timestamp": 1543248744,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/191835693/",
      "is_pending": "Not Pending",
      "title": "Encode and Decode Strings",
      "memory": "N/A",
      "code": "class Codec {\npublic:\n\n    // Encodes a list of strings to a single string.\n    string encode(vector<string>& strs) {\n        string res;\n        for(auto s:strs)\n        {\n            res += to_string(s.length());\n            res += 'x';\n            res += s;\n        }\n        return res;\n    }\n\n    // Decodes a single string to a list of strings.\n    vector<string> decode(string s) {\n        int p = 0;\n        vector<string> res;\n        while(p<s.length())\n        {\n            int x = s.find('x',p);\n            if(x==-1)\n                return res;\n            \n            int l = stoi(s.substr(p,x-p));\n            cout<<l<<endl;\n            res.push_back(s.substr(x+1, l));\n            p = x+l;\n        }\n        \n        return res;\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec;\n// codec.decode(codec.encode(strs));",
      "compare_result": null
    },
    {
      "id": 191835616,
      "lang": "cpp",
      "time": "6\u00a0months",
      "timestamp": 1543248697,
      "status_display": "Output Limit Exceeded",
      "runtime": "N/A",
      "url": "/submissions/detail/191835616/",
      "is_pending": "Not Pending",
      "title": "Encode and Decode Strings",
      "memory": "N/A",
      "code": "class Codec {\npublic:\n\n    // Encodes a list of strings to a single string.\n    string encode(vector<string>& strs) {\n        string res;\n        for(auto s:strs)\n        {\n            res += to_string(s.length());\n            res += 'x';\n            res += s;\n        }\n        return res;\n    }\n\n    // Decodes a single string to a list of strings.\n    vector<string> decode(string s) {\n        int p = 0;\n        vector<string> res;\n        while(p<s.length())\n        {\n            int x = s.find('x',p);\n            if(x==-1)\n                return res;\n            \n            int l = stoi(s.substr(p,x-p));\n            cout<<l<<endl;\n            res.push_back(s.substr(x+1, l));\n        }\n        \n        return res;\n        \n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec;\n// codec.decode(codec.encode(strs));",
      "compare_result": "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
      "id": 191710512,
      "lang": "cpp",
      "time": "6\u00a0months",
      "timestamp": 1543194365,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/191710512/",
      "is_pending": "Not Pending",
      "title": "Paint Fence",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    int numWays(int n, int k) {\n        if(n==0)\n            return 0;\n        vector<int> A(n);\n        A[0]=k;\n        A[1]=k*k;\n        A[2]=k*k*k - k;\n        \n        if(n<4)\n            return A[n-1];\n        \n        for(int i=3;i<n;i++)\n        {\n            A[i] = k * A[i-1] - (k-1)*A[i-3];\n            \n        }\n    ///    for(auto t:A)\n     //       cout<<t<<' ';\n        return A.back();\n        \n        \n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
      "id": 191710445,
      "lang": "cpp",
      "time": "6\u00a0months",
      "timestamp": 1543194344,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/191710445/",
      "is_pending": "Not Pending",
      "title": "Paint Fence",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    int numWays(int n, int k) {\n        vector<int> A(n);\n        A[0]=k;\n        A[1]=k*k;\n        A[2]=k*k*k - k;\n        \n        if(n<4)\n            return A[n-1];\n        \n        for(int i=3;i<n;i++)\n        {\n            A[i] = k * A[i-1] - (k-1)*A[i-3];\n            \n        }\n    ///    for(auto t:A)\n     //       cout<<t<<' ';\n        return A.back();\n        \n        \n    }\n};",
      "compare_result": null
    },
    {
      "id": 191683972,
      "lang": "cpp",
      "time": "6\u00a0months",
      "timestamp": 1543185727,
      "status_display": "Accepted",
      "runtime": "228 ms",
      "url": "/submissions/detail/191683972/",
      "is_pending": "Not Pending",
      "title": "Sentence Similarity II",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    unordered_map<string, string> parent;\n    \n    string getParent(string &s)\n    {\n//        cout<<s<<' ';\n        if(parent[s].empty() || parent[s]==s)\n        {\n            parent[s] = s;\n            return s;\n        }\n        \n        return getParent(parent[s]);\n    }\n    \n    bool areSentencesSimilarTwo(vector<string>& words1, vector<string>& words2, vector<pair<string, string>> pairs) {\n        \n        if(words1.size() != words2.size())\n            return false;\n       // cout<<pairs.size()<<endl;\n        for(int i=0;i<pairs.size();i++)\n        {\n            \n            auto p = pairs[i];\n    //        cout<<i<<endl;\n            auto p1 = getParent(p.first);\n     //       cout<<i<<endl;\n            auto p2 = getParent(p.second);\n     //       cout<<endl<<max(p1,p2)<<' '<<min(p1,p2)<<parent.size()<<endl;\n            parent[max(p1,p2)] = min(p1,p2);\n        }\n        for(int i=0;i<words1.size();i++)\n        {\n            if(getParent(words1[i]) != getParent(words2[i]))\n                return false;\n        }\n        \n        return true;\n        \n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
      "id": 191664348,
      "lang": "cpp",
      "time": "6\u00a0months",
      "timestamp": 1543179147,
      "status_display": "Runtime Error",
      "runtime": "N/A",
      "url": "/submissions/detail/191664348/",
      "is_pending": "Not Pending",
      "title": "Sentence Similarity II",
      "memory": "N/A",
      "code": "class Solution {\npublic:\n    unordered_map<string, string> parent;\n    \n    string getParent(string &s)\n    {\n        if(parent.count(s) ==0)\n            return s;\n        \n        return getParent(parent[s]);\n    }\n    \n    bool areSentencesSimilarTwo(vector<string>& words1, vector<string>& words2, vector<pair<string, string>> pairs) {\n        \n        if(words1.size() != words2.size())\n            return false;\n        \n        for(auto p:pairs)\n        {\n            auto p1 = getParent(p.first);\n            auto p2 = getParent(p.second);\n            parent[max(p1,p2)] = min(p1,p2);\n        }\n        for(int i=0;i<words1.size();i++)\n        {\n            if(getParent(words1[i]) != getParent(words2[i]))\n                return false;\n        }\n        \n        return true;\n        \n    }\n};",
      "compare_result": null
    },
    {
      "id": 191642277,
      "lang": "cpp",
      "time": "6\u00a0months",
      "timestamp": 1543170462,
      "status_display": "Accepted",
      "runtime": "12 ms",
      "url": "/submissions/detail/191642277/",
      "is_pending": "Not Pending",
      "title": "Binary Tree Longest Consecutive Sequence II",
      "memory": "N/A",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    \n    int res;\n    \n    vector<int> rec(TreeNode* node)\n    {\n        if(node == NULL)\n            return vector<int> {INT_MIN,0,0};\n        \n        \n        \n        vector<int> t{node->val, 1, 1};\n        int mc=1, mac = 1;\n        auto l = rec(node->left);\n        auto r = rec(node->right);\n        \n        if(l[0] - 1 == node->val)\n        {\n            t[1] = max(t[1], l[1]+1);\n            mac+=l[1];\n        }\n        \n        if(l[0] + 1 == node->val)\n        {\n            t[2] = max(t[2], l[2]+1);\n            mc += l[2];\n        }\n        \n        if(r[0] - 1 == node->val)\n        {\n            t[1] = max(t[1], r[1]+1);\n            mc += r[1];\n        }\n        \n        if(r[0] + 1 == node->val)\n        {\n            t[2] = max(t[2], r[2]+1);\n            mac += r[2];\n        }\n        \n        res = max({res, mc, mac});\n    /*    cout<<node->val<<' '<<mc<<' '<<mac<<\": \";\n        for(auto x:t)\n            cout<<x<<' ';\n        \n        cout<<endl;*/\n        return t;\n    }\n    \n    int longestConsecutive(TreeNode* root) {\n        res = 0;\n        rec(root);\n        \n        return res;\n    }\n};",
      "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
      "id": 191572905,
      "lang": "cpp",
      "time": "6\u00a0months",
      "timestamp": 1543127853,
      "status_display": "Accepted",
      "runtime": "0 ms",
      "url": "/submissions/detail/191572905/",
      "is_pending": "Not Pending",
      "title": "Split BST",
      "memory": "N/A",
      "code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> splitBST(TreeNode* root, int V) {\n        vector<TreeNode*> res(2, NULL);\n        \n        if(root == NULL)\n        {\n            return res;\n        }\n        cout<<root->val;\n        if(root->val <= V)\n        {\n            // break right\n            auto temp = splitBST(root->right, V);\n            root->right = temp[0];\n            res[0] = root;\n            res[1] = temp[1];\n            \n        }\n        else\n        {\n            // break left\n            auto temp = splitBST(root->left, V);\n            root->left = temp[1];\n            res[0] = temp[0];\n            res[1] = root;\n            \n        }\n      /*  if(res[0])\n            cout<<res[0];\n        cout<<' ';\n        if(res[1])\n            cout<<res[1];\n        \n        cout<<endl;\n        */\n        return res;\n    }\n};",
      "compare_result": "1111111111111111111111111111111111111111"
    }
  ],
  "has_next": true,
  "last_key": "%7B%22pk%22%3A%20%7B%22N%22%3A%20%22191572905%22%7D%2C%20%22dt%22%3A%20%7B%22S%22%3A%20%222018-11-25T06%3A37%3A33.492096%2B0000%22%7D%2C%20%22sid%22%3A%20%7B%22N%22%3A%20%221538254%22%7D%7D"
}