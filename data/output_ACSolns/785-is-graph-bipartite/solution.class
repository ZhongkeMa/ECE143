class Solution(object):
    def isBipartite(self, graph):
        """
        :type graph: List[List[int]]
        :rtype: bool
        """
        curr,prev='a','b'
        self.visited={}
        self.graph=graph
        flag=True
        
        for i in range(len(self.graph)):
            if i not in self.visited:
                if not self.dfs(i,curr,prev):
                    flag=False
                    break
        
        return flag
        
    def dfs(self,i,curr,prev):
        if i in self.visited:
            return self.visited[i]==curr
        
        self.visited[i]=curr
        
        for neigh in self.graph[i]:
            if not self.dfs(neigh,prev,curr):
                return False
            
        return True
            
        